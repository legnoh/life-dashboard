---

- name: Start Docker containers
  block:
    - name: Create config directories
      ansible.builtin.file:
        path: "{{ ansible_env.HOME }}/grafstation/{{ item }}"
        state: directory
        mode: '0755'
      loop:
        - configs
        - prometheus
        - withings

    - name: Copy config files
      when: not ansible_check_mode
      ansible.builtin.synchronize:
        src: "{{ item }}"
        dest: "{{ ansible_env.HOME }}/grafstation/configs/{{ item }}"
        recursive: true
        delete: true
      loop:
        - html/
        - docker-compose.yml
        - nginx.conf

    - name: Create prometheus.yml file
      when: not ansible_check_mode
      ansible.builtin.template:
        src: prometheus.yml.j2
        dest: "{{ ansible_env.HOME }}/grafstation/prometheus/prometheus.yml"
        mode: '0644'

    - name: Pull docker images
      when: not ansible_check_mode
      community.docker.docker_compose_v2_pull:
        docker_host: "unix://{{ ansible_env.HOME }}/.rd/docker.sock"
        project_src: "{{ ansible_env.HOME }}/grafstation/configs"
      environment: &docker_envs
        ASKEN_PASSWORD: "{{ start_docker_containers_asken_password }}"
        ASKEN_USERNAME: "{{ start_docker_containers_asken_username }}"
        GRAFANA_ADMIN_PASSWORD: "{{ start_docker_containers_grafana_admin_password }}"
        MONEYFORWARD_EMAIL: "{{ start_docker_containers_moneyforward_email }}"
        MONEYFORWARD_PASSWORD: "{{ start_docker_containers_moneyforward_password }}"
        NATURE_OAUTH_TOKEN: "{{ start_docker_containers_nature_oauth_token }}"
        OPENWEATHER_CITY: "{{ start_docker_containers_openweather_city }}"
        OPENWEATHER_API_KEY: "{{ start_docker_containers_openweather_api_key }}"
        OURA_ACCESS_TOKEN: "{{ start_docker_containers_oura_access_token }}"
        OURA_TZ: "{{ start_docker_containers_oura_tz }}"
        SPEEDTEST_SERVER_IDS: "{{ start_docker_containers_speedtest_server_ids }}"
        WITHINGS_ACCESS_TOKEN: "{{ start_docker_containers_withings_access_token }}"
        WITHINGS_CLIENT_ID: "{{ start_docker_containers_withings_client_id }}"
        WITHINGS_CONSUMER_SECRET: "{{ start_docker_containers_withings_consumer_secret }}"
        WITHINGS_CREATED: "{{ start_docker_containers_withings_created }}"
        WITHINGS_REFRESH_TOKEN: "{{ start_docker_containers_withings_refresh_token }}"
        WITHINGS_TZ: "{{ start_docker_containers_withings_tz }}"
        WITHINGS_USERID: "{{ start_docker_containers_withings_userid }}"

    - name: Stop docker containers
      when: not start_docker_containers_recreate_container and not ansible_check_mode
      community.docker.docker_compose_v2:
        docker_host: "unix://{{ ansible_env.HOME }}/.rd/docker.sock"
        project_src: "{{ ansible_env.HOME }}/grafstation/configs"
        state: stopped
      environment: *docker_envs

    - name: Delete docker containers
      when: start_docker_containers_recreate_container and not ansible_check_mode
      community.docker.docker_compose_v2:
        docker_host: "unix://{{ ansible_env.HOME }}/.rd/docker.sock"
        project_src: "{{ ansible_env.HOME }}/grafstation/configs"
        state: absent
      environment: *docker_envs

    - name: Delete terraform.tfstate
      when: start_docker_containers_recreate_container and not ansible_check_mode
      ansible.builtin.file:
        state: absent
        path: /tmp/terraform.tfstate

    - name: Start docker containers
      when: not ansible_check_mode
      community.docker.docker_compose_v2:
        docker_host: "unix://{{ ansible_env.HOME }}/.rd/docker.sock"
        project_src: "{{ ansible_env.HOME }}/grafstation/configs"
      environment: *docker_envs

    - name: Prune unused resources
      when: not ansible_check_mode
      community.docker.docker_prune:
        docker_host: "unix://{{ ansible_env.HOME }}/.rd/docker.sock"
        builder_cache: true
        containers: true
        images: true
        networks: true
        volumes: true
