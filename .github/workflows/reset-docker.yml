name: Reset docker-compose setting

on:
  push:
    branches:
    - main
    paths:
    - 'docker/**'
  workflow_dispatch:
  workflow_run:
    workflows: [ Generate SNMP Config ]
    types: [ completed ]

jobs:
  setup-raspberry-pi:
    runs-on: self-hosted
    steps:
    - uses: actions/checkout@v3
    - name: setup GCP Auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}
    - name: setup GCP project information
      uses: google-github-actions/setup-gcloud@v1
    - name: Download JSON from GCS
      run: |
        gsutil cp gs://${{ secrets.GCP_BUCKET_NAME }}/*.prom docker/staticfile-exporter/metrics
    - name: Download snmp.yml from GCS
      run: |
        gsutil cp gs://${{ secrets.GCP_BUCKET_NAME }}/snmp.yml docker/snmp-exporter
    - name: start docker images
      env:
        OPENWEATHER_CITY: ${{ secrets.OPENWEATHER_CITY }}
        OPENWEATHER_API_KEY: ${{ secrets.OPENWEATHER_API_KEY }}
        OPENWEATHER_LISTEN_ADDRESS: ${{ secrets.OPENWEATHER_LISTEN_ADDRESS }}
        SNMP_EXPORTER_MODULE_NAME: ${{ secrets.SNMP_EXPORTER_MODULE_NAME }}
        SNMP_TARGET_IP: ${{ secrets.SNMP_TARGET_IP }}
        TADOAC_USERNAME: ${{ secrets.TADOAC_USERNAME }}
        TADOAC_PASSWORD: ${{ secrets.TADOAC_PASSWORD }}
        TODOIST_API_KEY: ${{ secrets.TODOIST_API_KEY }}
        SMARTMETER_ID: ${{ secrets.SMARTMETER_ID }}
        SMARTMETER_PASSWORD: ${{ secrets.SMARTMETER_PASSWORD }}
        GRAFANA_REMOTE_WRITE_USERNAME: ${{ secrets.GRAFANA_REMOTE_WRITE_USERNAME }}
        GRAFANA_REMOTE_WRITE_API_KEY: ${{ secrets.GRAFANA_REMOTE_WRITE_API_KEY }}
        WITHINGS_CLIENT_ID: ${{ secrets.WITHINGS_CLIENT_ID }}
        WITHINGS_CONSUMER_SECRET: ${{ secrets.WITHINGS_CONSUMER_SECRET }}
        WITHINGS_ACCESS_TOKEN: ${{ secrets.WITHINGS_ACCESS_TOKEN }}
        WITHINGS_REFRESH_TOKEN: ${{ secrets.WITHINGS_REFRESH_TOKEN }}
        WITHINGS_USERID: ${{ secrets.WITHINGS_USERID }}
        WITHINGS_CREATED: ${{ secrets.WITHINGS_CREATED }}
      run: |
        ./docker/start.sh
    - name: create playlist
      run: |
        is_exist_playlist=$(curl -o /dev/null -w '%{http_code}\n' -s http://localhost:3000/api/playlists/1/items)
        if [[ ${is_exist_playlist} == 404 ]]; then
          curl -X "POST" "http://localhost:3000/api/playlists/" \
              -H 'Content-Type: application/json; charset=utf-8' \
              -d $'{
            "name": "Kiosk playlist",
            "interval": "30m",
            "items": [
              {
                "value": "2",
                "title": "Service/main dashboard",
                "order": 1,
                "type": "dashboard_by_id"
              }
            ]
          }'
        fi
